@using TotalBase.Enums;
@using TotalPortal.Configuration

@using TotalDTO;
@using TotalModel
@using TotalDTO.Inventories
@using TotalPortal.Areas.Inventories.ViewModels

@model IWarehouseTransferViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => (model as IWarehouseTransferPrimitiveDTO).WarehouseTransferID)
    @Html.HiddenFor(model => (model as IWarehouseTransferPrimitiveDTO).HasTransferOrder)

    @Html.HiddenFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml", @Model, new ViewDataDictionary { { "EntryDateReadonly", false } })

        <div class="SBT-Hidden">
            @Html.EditorFor(d => (d as IWarehouseTransferDTO).Warehouse, new { WarehouseDisplayName = @Model.Warehouse.GetDisplayName(m => m.WarehouseID), LeftPanelInput = "left-panel-input" })
        </div>

        <div class="SBT-Hidden">
            @Html.EditorFor(d => (d as IWarehouseTransferDTO).WarehouseReceipt, new { WarehouseDisplayName = @Model.WarehouseReceipt.GetDisplayName(m => m.WarehouseID), LeftPanelInput = "left-panel-input" })
        </div>

        <div class="form-group">
            @Html.EditorFor(d => (d as IWarehouseTransferDTO).Storekeeper, new { EmployeeDisplayName = @Model.Storekeeper.GetDisplayName(m => m.EmployeeID) })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderReference)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderReference, "", new { @class = "text-danger" })
            </div>
        </div>


        @if (Model.TransferOrderEntryDate != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderEntryDate)
                <div class="div-input">
                    @Html.Kendo().DateTimePickerFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as IWarehouseTransferPrimitiveDTO).TransferOrderEntryDate, "", new { @class = "text-danger" })
                </div>
            </div>
        }

    </div>

    <div class="right-panel">
        <div class="right-top-panel right-top-panel-H2">
            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => (model as IWarehouseTransferPrimitiveDTO).WarehouseTransferJobs)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => (model as IWarehouseTransferPrimitiveDTO).WarehouseTransferJobs).HtmlAttributes(new { @class = "right-panel-input" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => (model as IWarehouseTransferPrimitiveDTO).WarehouseTransferJobs, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="show-current-PriceCategory" style="float: right; margin-top: -40px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 32px;">
                    <span style="color:blue;" id="label_WarehouseCode"> @Html.Label(@Model.Warehouse.Code) </span>
                    <span id="label_WarehouseReceiptCode" style="color:orange;"> @Html.Label(@Model.WarehouseReceipt.Code) </span>
                </div>
            </div>
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.WarehouseTransferViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.WarehouseTransferDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= WarehouseTransferDetailID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].WarehouseTransferDetailID' value='#= WarehouseTransferDetailID #' />");
                    columns.Bound(p => p.WarehouseTransferID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= WarehouseTransferID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].WarehouseTransferID' value='#= WarehouseTransferID #' />");

                    columns.Bound(p => p.TransferOrderDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (TransferOrderDetailID == null)? '' : TransferOrderDetailID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].TransferOrderDetailID' value='#= (TransferOrderDetailID == null) ? '' : TransferOrderDetailID #' />");
                    columns.Bound(p => p.TransferOrderID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (TransferOrderID == null)? '' : TransferOrderID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].TransferOrderID' value='#= (TransferOrderID == null) ? '' : TransferOrderID #' />");

                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(138)
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)")
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(118).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Hidden()
                      .ClientTemplate("#= (GoodsReceiptID == null)? '' : GoodsReceiptID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].GoodsReceiptID' value='#= (GoodsReceiptID == null) ? '' : GoodsReceiptID #' />");
                    columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsReceiptDetailID == null)? '' : GoodsReceiptDetailID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].GoodsReceiptDetailID' value='#= (GoodsReceiptDetailID == null) ? '' : GoodsReceiptDetailID #' />");

                    columns.Bound(p => p.GoodsReceiptCode).DisplayNameTitle().Width(20).Hidden()
                        .ClientTemplate("#= (GoodsReceiptCode == null)? '' : GoodsReceiptCode #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].GoodsReceiptCode' value='#= (GoodsReceiptCode == null) ? '' : GoodsReceiptCode #' />");
                    columns.Bound(p => p.GoodsReceiptReference).DisplayNameTitle().Width(30)
                        .ClientTemplate("#= (GoodsReceiptReference == null)? '' : GoodsReceiptReference #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].GoodsReceiptReference' value='#= (GoodsReceiptReference == null) ? '' : GoodsReceiptReference #' />");
                    columns.Bound(p => p.GoodsReceiptEntryDate).DisplayNameTitle().Width(20)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (GoodsReceiptEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].GoodsReceiptEntryDate' value='#= (GoodsReceiptEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #' />");


                    columns.Bound(p => p.BatchID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BatchID #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].BatchID' value='#= BatchID #' />");
                    columns.Bound(p => p.BatchEntryDate).DisplayNameTitle().Width(30)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (BatchEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].BatchEntryDate' value='#= (BatchEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #' />");

                    columns.Bound(p => p.TransferOrderRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(!@Model.HasTransferOrder)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', TransferOrderRemains) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].TransferOrderRemains' value='#= TransferOrderRemains #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(128)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='WarehouseTransferViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="GetDetailAvailables()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Xuất hàng từ tồn kho </button>
                                <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Xuất nguyên cuộn </button>
                            </text>);
                        }
                        else
                        {//Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                            .Name("iconButton")
                                            .HtmlAttributes(new { type = "button" })
                                            .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        }
                    })

                                                                                                                                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                                                                                                                                .Selectable(settings =>
                                                                                                                                {
                                                                                                                                    settings.Mode(GridSelectionMode.Multiple);
                                                                                                                                    settings.Type(GridSelectionType.Row);
                                                                                                                                })
                                                                                                                                .DataSource(dataSource => dataSource
                                                                                                                                .Ajax()
                                                                                                                                .Batch(true)
                                                                                                                                .ServerOperation(false)
                                                                                                                                .Model(model =>
                                                                                                                                {
                                                                                                                                    model.Id(x => x.WarehouseTransferDetailID);
                                                                                                                                    model.Field(m => m.WarehouseTransferDetailID).DefaultValue(0);
                                                                                                                                    model.Field(m => m.WarehouseTransferID).DefaultValue(@Model.WarehouseTransferID);
                                                                                                                                })
                                                                                                                                .Events(events =>
                                                                                                                                {
                                                                                                                                    events.Error("kendGrid_ErrorHandler");
                                                                                                                                })
                                                                                                                                .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                                                                                                                                .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
                                                                                                                                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                                                                                                                            )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseDTO).Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseDTO).Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseDTO).Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => (model as IBaseModel).Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => (model as IBaseModel).Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => (model as IBaseModel).Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)"> <img src="~/Content/Images/New/save-icon.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/save-verify-icon.png" /> Lưu và duyệt</button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", Model.ControllerName)" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Actions-document-print-icon.png" /> Lưu, duyệt và in PXK</button>
            }
            else
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", Model.ControllerName, new { id = @Model.WarehouseTransferID })'"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In PXK </button>
            }

            @if (Model.WarehouseTransferID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", Model.ControllerName, new {id = @Model.WarehouseTransferID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Actions-ok-icon32.png" : "Cross-icon-cancel32.png")" /> @(!Model.Approved ? "Duyệt PXK" : "Hủy duyệt PXK") </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Inventories/WarehouseTransfers/Import.js")"></script>

<script type="text/javascript">
    function GetDetailAvailables() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), ($("#HasTransferOrder").val() === "True" ? "@Url.Action("GetTransferOrderDetails", Model.ControllerName, new { area = "Inventories" })" : "@Url.Action("GetGoodsReceiptDetailAvailables", Model.ControllerName, new { area = "Inventories" })"), "Xuất kho", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }
</script>
