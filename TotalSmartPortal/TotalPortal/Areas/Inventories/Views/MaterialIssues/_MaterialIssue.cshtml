@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Inventories.ViewModels.MaterialIssueViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.Hidden("WarehouseTaskID", (int)@ViewBag.WarehouseTaskID);
    @Html.Hidden("WarehouseTaskIDList", (string)@ViewBag.WarehouseTaskIDList);

    @Html.HiddenFor(model => model.MaterialIssueID)
    @Html.HiddenFor(model => model.MaterialIssueTypeID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.HiddenFor(model => model.ProductionOrderID)
        @Html.HiddenFor(model => model.ProductionOrderDetailID)

        @Html.HiddenFor(model => model.PlannedOrderID)
        @Html.HiddenFor(model => model.FirmOrderID)

        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Shift.cshtml")
        
        <div class="SBT-Hidden">
            @Html.EditorFor(d => d.Warehouse, new { WarehouseDisplayName = @Model.GetDisplayName(m => m.Warehouse) })
        </div>
        

        @if (Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.FirmOrderReference)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderReference, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FirmOrderCode)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FirmOrderEntryDate)
                <div class="div-input">
                    @Html.Kendo().DateTimePickerFor(model => model.FirmOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderEntryDate, "", new { @class = "text-danger" })
                </div>
            </div>                   
        }

        <div class="form-group">
            @Html.EditorFor(d => d.ProductionLine)
        </div>

        <div class="form-group">
            @Html.EditorFor(d => d.CrucialWorker, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.CrucialWorker) })
        </div>
        <div class="form-group">
            @Html.EditorFor(d => d.Storekeeper, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.Storekeeper) })
        </div>
    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H2">

            @Html.EditorFor(d => d.Customer, new { CustomerDisplayName = @Model.GetDisplayName(m => m.Customer), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : "Lệnh sản xuất tổng hợp của nhiều khách hàng"), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })

            @Html.HiddenFor(model => model.FirmOrderSpecs)
            @Html.HiddenFor(model => model.FirmOrderSpecification)
            <div class="form-group">
                <div class="right-panel-label right-panel-label-whole-width">
                    @Html.LabelFor(model => model.FirmOrderSpecificationSpecs)
                </div>
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderSpecificationSpecs).HtmlAttributes(new { @class = "right-panel-input", @readonly = "readonly" })
                </div>
                <div class="div-validation-message">
                    @Html.ValidationMessageFor(model => model.FirmOrderSpecificationSpecs, "", new { @class = "text-danger" })
                </div>
            </div>      
            
            <div id="show-current-PriceCategory" style="float: right; margin-top: -120px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 32px;">                    
                     <span style="color:blue;" id="label_WarehouseCode"> @Html.Label(@Model.Warehouse.Code) </span>
                </div>
            </div>                 
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.MaterialIssueViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.MaterialIssueDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= MaterialIssueDetailID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].MaterialIssueDetailID' value='#= MaterialIssueDetailID #' />");
                    columns.Bound(p => p.MaterialIssueID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= MaterialIssueID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].MaterialIssueID' value='#= MaterialIssueID #' />");


                    columns.Bound(p => p.FirmOrderMaterialID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderMaterialID == null)? '' : FirmOrderMaterialID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].FirmOrderMaterialID' value='#= (FirmOrderMaterialID == null) ? '' : FirmOrderMaterialID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");                    
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(200).EditorTemplateName(Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders ? "StringReadonly" : "AutoCompletes/CommodityAvailable")
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(280).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");



                    columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsReceiptID == null)? '' : GoodsReceiptID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].GoodsReceiptID' value='#= (GoodsReceiptID == null) ? '' : GoodsReceiptID #' />");
                    columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsReceiptDetailID == null)? '' : GoodsReceiptDetailID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].GoodsReceiptDetailID' value='#= (GoodsReceiptDetailID == null) ? '' : GoodsReceiptDetailID #' />");

                    columns.Bound(p => p.GoodsReceiptCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (GoodsReceiptCode == null)? '' : GoodsReceiptCode #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].GoodsReceiptCode' value='#= (GoodsReceiptCode == null) ? '' : GoodsReceiptCode #' />");
                    columns.Bound(p => p.GoodsReceiptReference).DisplayNameTitle().Width(60)//.Hidden(Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders && @Model.PlannedOrderID == null ? false : true)
                        .ClientTemplate("#= (GoodsReceiptReference == null)? '' : GoodsReceiptReference #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].GoodsReceiptReference' value='#= (GoodsReceiptReference == null) ? '' : GoodsReceiptReference #' />");
                    columns.Bound(p => p.GoodsReceiptEntryDate).DisplayNameTitle().Width(80)//.Hidden(Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders && @Model.PlannedOrderID == null ? false : true)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (GoodsReceiptEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].GoodsReceiptEntryDate' value='#= (GoodsReceiptEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #' />");

                    columns.Bound(p => p.BatchID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= BatchID #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].BatchID' value='#= BatchID #' />");
                    columns.Bound(p => p.BatchEntryDate).DisplayNameTitle().Filterable(false).Width(80)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (BatchEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].BatchEntryDate' value='#= (BatchEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #' />");

                    columns.Bound(p => p.WorkshiftFirmOrderRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders ? false : true)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', WorkshiftFirmOrderRemains) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].WorkshiftFirmOrderRemains' value='#= WorkshiftFirmOrderRemains #' />");

                    columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders ? false : true)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(true)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");



                    columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='MaterialIssueViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(50).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding:0px;' onclick='callVoidDetail(#= MaterialIssueDetailID #)'><span class='k-icon k-edit'></span></a>");
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            if (Model.MaterialIssueTypeID == (int)GlobalEnums.MaterialIssueTypeID.FirmOrders)
                                toolbar.Template(@<text>
                                    <button type="button" class="k-button" onclick="GetPendingFirmOrderMaterials()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Xuất màng từ tồn kho </button>
                                    <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Xuất nguyên cuộn </button>
                                </text>);
                            else
                                toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>
                                </text>);
                        }
                        else
                        {//Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                            .Name("iconButton")
                                            .HtmlAttributes(new { type = "button" })
                                            .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.MaterialIssueDetailID);
                                model.Field(m => m.MaterialIssueDetailID).DefaultValue(0);
                                model.Field(m => m.MaterialIssueID).DefaultValue(@Model.MaterialIssueID);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                            .Aggregates(a => a.Add(x => x.WorkshiftFirmOrderRemains).Sum())
                            .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
                            .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                        )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)                        
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>                

        @Html.Partial("~/Views/Helpers/Commons/_PlannedOrderLogs.cshtml")
           


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "MaterialIssues")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-icon.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "MaterialIssues")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/save-verify-icon.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "MaterialIssues")" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Actions-document-print-icon.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "MaterialIssues", new {id = @Model.MaterialIssueID })'"> <img src="~/Content/Images/Mains/Cross-icon-cancel32.png" /> Hủy duyệt </button>
                }
            }

            @if (Model.MaterialIssueID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "MaterialIssues", new { id = @Model.MaterialIssueID })'"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingFirmOrderMaterials() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingFirmOrderMaterials", "MaterialIssues", new { area = "Inventories" })", "Xuất kho", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function callVoidDetail(materialIssueDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", "MaterialIssues")" + "/" + $("#MaterialIssueID").val() + "/" + materialIssueDetailID, "Hủy/ phục hồi một phần phiếu xuất", @Settings.PopupWidthVoid,  @Settings.PopupHeightVoid);
        });
    }
</script>
