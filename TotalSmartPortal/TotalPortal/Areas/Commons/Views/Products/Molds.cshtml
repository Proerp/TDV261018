@using TotalBase.Enums;
@using TotalPortal.Configuration;

@using TotalDTO
@using TotalDTO.Commons
@using TotalModel.Models;
@using TotalPortal.Areas.Commons.ViewModels

@{Layout = "~/Views/Shared/_LayoutPopup.cshtml";}

@model  ICommodityViewModel


@Html.HiddenFor(model => (model as ICommodityPrimitiveDTO).CommodityID)
@Html.HiddenFor(model => (model as IBaseDTO).Editable)

<div class="left-panel">
    <div style="padding-left: 48px; padding-top: 16px; "> <img src="~/Content/Images/New/2017/mold-64.png" /> </div>
</div>
<div class="right-panel">
    <div class="right-first-panel">
        <div class="form-group">
            @Html.LabelFor(model => (model as ICommodityPrimitiveDTO).CodePartA)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => (model as ICommodityPrimitiveDTO).CodePartA).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => (model as ICommodityPrimitiveDTO).CodePartA, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityCategory.cshtml", @Model, new ViewDataDictionary { { "CommodityCategoryReadonly", true } })

        <div class="form-group" style="padding-top: 16px;">
            @Html.EditorFor(d => (d as ICommodityPrimitiveDTO).Mold, new { MoldDisplayName = "Vui lòng chọn loại khuôn, sau đó nhấn 'Thêm vào khay'", MoldLeftPanelInput = "left-panel-input" })
        </div>
    </div>

    <div class="right-second-panel">
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityLine.cshtml", @Model, new ViewDataDictionary { { "CommodityLineReadonly", true } })
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/CommodityClass.cshtml", @Model, new ViewDataDictionary { { "CommodityClassReadonly", true } })

        <div class="form-group" style="padding-top: 16px;">
            @Html.Label(" ")
            <div class="div-input">
                <button type="button" class="k-button left-panel-input" onclick="AddCommodityMold()"> <img src="~/Content/Images/New/2017/mold-24.png" /> Thêm vào khay: @(@Model.Name.Length <= 26 ? @Model.Name : @Model.Name.Substring(0, 25)) </button>
            </div>
        </div>
    </div>

</div>

<div class="form-group">
    @(Html.Kendo().Grid<CommodityMold>()
    .Name("gridMolds")
    .Columns(columns =>
    {
        columns.Bound(c => c.CommodityMoldID).Hidden();
        columns.Bound(c => c.MoldID).Hidden();
        columns.Bound(c => c.MoldCode).Title("Mã").Width(68).HtmlAttributes(new { @readonly = "readonly" }).EditorTemplateName("StringReadonly");
        columns.Bound(c => c.MoldName).Title("Tên").Width(128).HtmlAttributes(new { @readonly = "readonly" }).EditorTemplateName("StringReadonly");

        columns.Bound(c => c.EntryDate).Title("Ngày thêm").Width(60).Format("{0:" + Settings.DateTimeFormat + "}").HtmlAttributes(new { @class = "grid-column-center", @readonly = "readonly" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).EditorTemplateName("DateTimeReadonly");
        
        columns.Bound(c => c.Quantity).Title("SL").HtmlAttributes(new { @class = "grid-number-column"}).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(27)
            .Format(Settings.kfmN0)
            .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', Quantity) #" + "<input type='hidden' name='CommodityMold.Quantity' value='#= Quantity #' />")
            .EditorTemplateName("Quantity");

        columns.Bound(c => c.Remarks).Title("Ghi chú").Width(96);
        columns.Template(t => { }).Title("Mặc định").ClientTemplate("<input id = 'IsDefault' class='GridCheckbox' #= IsDefault ? checked='checked':'' #  type='checkbox' />").HtmlAttributes(new { @class = "grid-column-center", @readonly = "readonly" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(32);

        columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(20)
            .ClientTemplate("<a class='k-button' style='padding-left:5px; min-width:28px; width:28px' onclick='RemoveCommodityMold(#=CommodityMoldID#)'><span class='k-icon k-delete'></span></a>");
    })

    .Scrollable(s => s.Height(219))
    .DataSource(ds => ds.Ajax()
        .Model(model => model.Id(x => x.CommodityMoldID))
        .Read(read => read.Action("GetCommodityMolds", "MoldAPIs", new { area = "Commons" }).Data(@<text>
            function (e) {
            return {
            commodityID: $("#CommodityID").val()
            };}
        </text>))
        .ServerOperation(true))
        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell); })
        .Selectable()
        .Events(events => { events.Save("SaveCommodityMold"); })
    )

</div>


<div class="background-bar" style="height: 45px;">
    <div class="popup-button-bar">
        <button type="button" class="k-button" onclick="window.parent.$('#myWindow').data('kendoWindow').close()"> <img src="~/Content/Images/Mains/Size24/Users-Exit-icon-24.png" /> Đóng </button>
    </div>
</div>

<script type="text/javascript">
    function AddCommodityMold(e) {
        if ($("#Editable").val() != 'True')
            return;

        return $.ajax({
            url: '@Url.Action("AddCommodityMold", "MoldAPIs", new { area = "Commons" })',
            data: JSON.stringify({ "moldID": $("#Mold_MoldID").val(), "commodityID": $("#CommodityID").val(), "quantity": $("#Mold_Quantity").val() }),

            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                if (result.AddResult == "Successfully") {
                    $("#gridMolds").data("kendoGrid").dataSource.read();
                }
                else
                    alert(result.AddResult);
            },
            error: function (jqXHR, textStatus) {
                alert(textStatus);
            }
        });
    }

    function RemoveCommodityMold(commodityMoldID) {
        if ($("#Editable").val() != 'True')
            return;
        return $.ajax({
            url: '@Url.Action("RemoveCommodityMold", "MoldAPIs", new { area = "Commons" })',
            data: JSON.stringify({ "commodityMoldID": commodityMoldID }),

            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                if (result.RemoveResult == "Successfully") {
                    $("#gridMolds").data("kendoGrid").dataSource.read();
                }
                else
                    alert(result.RemoveResult);
            },
            error: function (jqXHR, textStatus) {
                alert(textStatus);
            }
        });
    }

    function SaveCommodityMold(e) {
        if (e.values.Quantity != undefined || e.values.Remarks != undefined)
            UpdateCommodityMold(e.model.CommodityMoldID, $("#CommodityID").val(), e.values.Quantity != undefined ? e.values.Quantity : e.model.Quantity, e.values.Remarks != undefined ? e.values.Remarks : e.model.Remarks, e.model.IsDefault)
    }

    $('#gridMolds').on('click', '.GridCheckbox', function () {
        var grid = $('#gridMolds').data().kendoGrid;
        var dataItem = grid.dataItem($(this).closest('tr'));

        var checked = $(this).is(':checked');

        UpdateCommodityMold(dataItem.CommodityMoldID, $("#CommodityID").val(), dataItem.Quantity, dataItem.Remarks, (this.id === "IsDefault" ? checked : dataItem.IsDefault))
    })

    function UpdateCommodityMold(commodityMoldID, commodityID, quantity, remarks, isDefault) {
        if ($("#Editable").val() != 'True')
            return;

        return $.ajax({
            url: '@Url.Action("UpdateCommodityMold", "MoldAPIs", new { area = "Commons" })',
            data: JSON.stringify({ "commodityMoldID": commodityMoldID, "commodityID": commodityID, "quantity": quantity, "remarks": remarks, "isDefault": isDefault }),

            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                if (result.SetResult == "Successfully") {
                    $("#gridMolds").data("kendoGrid").dataSource.read();
                }
                else
                    alert(result.SetResult);
            },
            error: function (jqXHR, textStatus) {
                alert(textStatus);
            }
        });
    }

</script>

<style>
    .right-first-panel {
        padding-right: 30px;
    }

    .right-second-panel {
        padding-top: 1px;
        padding-right: 13px;
    }

    .left-panel-input {
        width: 100%;
    }
</style>