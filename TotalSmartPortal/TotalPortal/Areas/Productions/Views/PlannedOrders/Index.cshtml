@using TotalPortal.Configuration

@model TotalPortal.Areas.Productions.ViewModels.PlannedOrderViewModel

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.PlannedOrderIndex>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.PlannedOrderID).DisplayNameTitle().Hidden();
                columns.Bound(p => p.EntryDate).Title("Ngày").Format("{0:dd/MM/yyyy}").Width(90).Filterable(false);

                columns.Bound(p => p.Reference).Title("#").Width(10).Filterable(false).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Productions/PlannedOrders", action = "Edit" }) + "/#= PlannedOrderID #'>#=Reference#</a>");
                columns.Bound(p => p.Code).Title("Số ĐH").Width(20).Filterable(false);
                columns.Bound(p => p.CustomerName).Title("Khách hàng").Width(190);
                columns.Bound(p => p.Description).Title("Diễn giải").Width(130);
                columns.Bound(p => p.VoidTypeName).Title("Hủy đh").Width(60);

                columns.Bound(p => p.QuantityRequested).Title("Đặt hàng").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).Width(60).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
                columns.Bound(p => p.QuantityOnhand).Title("Tồn kho").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).Width(60).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
                columns.Bound(p => p.Quantity).Title("Phải sx").Format(Settings.kfmAmount).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).Width(80).ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" }).Hidden(@ViewBag.ShowDiscount ? true : false);
                columns.Bound(p => p.QuantityProduced).Title("Đã sx").Format(Settings.kfmAmount).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).Width(80).ClientFooterTemplate("#= kendo.format('" + Settings.kfmAmount + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" }).Hidden(@ViewBag.ShowDiscount ? false : true);

                //columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(92)
                //    .ClientTemplate("<a class='k-button' style='padding-left:5px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Productions/PlannedOrders", action = "Void" }) + "/#= PlannedOrderID #'><span class='k-icon k-edit'></span></a> <a class='k-button' style='padding-left:0px; padding-right:0px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Productions/PlannedOrders", action = "Print" }) + "/#= PlannedOrderID #'><span class='k-icon k-i-folder-add'></span></a>");
            })
            .ToolBar(toolbar =>
            {
                toolbar.Template(@<text>
                    <button type="button" class="k-button" onclick="createWizard()"> <img src="~/Content/Images/Mains/Size24/folder-documents-icon-24.png" /> Lập đơn hàng </button>
                    <div class="toolbar" style="float: right;">
                        <label>Nhập số phiếu, số đơn hàng hoặc tên KH</label>
                        <input id="indexFilterText" class="k-textbox" style="text-align: center; " onkeyup="indexFilterText_KeyUp()" />


                        @*<div style="text-align: right; margin-top: 4px;">*@

                        <span id="filterExtended">
                            @Html.Kendo().DatePicker().Name("ExtendedFromDate").Value(Model.GlobalFromDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", style = "text-align: center; width:118px" })
                            @Html.Kendo().DatePicker().Name("ExtendedToDate").Value(Model.GlobalToDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", style = "text-align: center; width:118px" })

                            @(Html.Kendo().DropDownList()
                                    .Name("ShowFilterOptionID")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .HtmlAttributes(new { @style = "width: 268px; text-align: center; " })
                                    .BindTo(new List<SelectListItem>()
                                      {
                                            new SelectListItem { Text = "ĐH cần sản xuất", Value = "10"},
                                            new SelectListItem { Text = "ĐH cần sản xuất [Chưa sx]", Value = "11"},
                                            new SelectListItem { Text = "ĐH cần sản xuất [Đang sx]", Value = "12"},
                                            new SelectListItem { Text = "ĐH đã sản xuất [Từ ... Đến]", Value = "20"},
                                            new SelectListItem { Text = "Tất cả [Từ ... Đến]", Value = "0"},
                                      })
                                    .Events(e => e.Change("indexFilterText_KeyUp"))
                                    //.HtmlAttributes(new { @style = "padding-right: 13px;" })
                            )
                        </span>


                        @*</div>*@



                    </div>
                </text>);
            })
            .Pageable()
            .Groupable(g => g.Messages(messages => messages.Empty("Phân nhóm dữ liệu: Kéo và thả tiêu đề một hoặc nhiều cột dữ liệu ngay bên dưới vào đây để phân nhóm hiển thị theo phân cấp của các cột dữ liệu")))
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetPlannedOrderIndexes", "PlannedOrderAPIs", new { area = "Productions" }).Data("onGetPlannedOrderIndexes"))
                .Sort(sort =>
                    {
                        sort.Add(p => p.EntryDate).Descending();
                        sort.Add(p => p.PlannedOrderID).Descending();
                    })
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(x => x.PlannedOrderID);
                    model.Field(m => m.PlannedOrderID).DefaultValue(0);
                })
                .ServerOperation(true)
                .Aggregates(a => a.Add(x => x.QuantityRequested).Sum())
                .Aggregates(a => a.Add(x => x.QuantityOnhand).Sum())
                .Aggregates(a => a.Add(x => x.Quantity).Sum())
                .Aggregates(a => a.Add(x => x.QuantityProduced).Sum())
                )
            .HtmlAttributes(new { @class = "grid-class" }))
</div>



<script type="text/javascript">

    function onGetPlannedOrderIndexes(e) {
        var indexFilterText = $("#indexFilterText").val();
        return {
            withExtendedSearch: true, //indexFilterText && indexFilterText.length >= "@Settings.AutoCompleteMinLenght03" ? true : false,
            extendedFromDate: $("#ExtendedFromDate").val(),
            extendedToDate: $("#ExtendedToDate").val(),
            filterOptionID: $("#ShowFilterOptionID").val()
        };
    }

    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("PlannedOrderID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", "PlannedOrders")", "Lập đơn hàng sản xuất", "@Settings.PopupWidth", "@Settings.PopupHeightWithTab");
        });
    }


    decoratingKindex = function (idx, elem) {

        var isWarrantyClaim = elem.InActive;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
        }

        isWarrantyClaim = elem.InActivePartial;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus1");
        }
    }






    function indexFilterText_KeyUp() {
        var indexFilterText = $("#indexFilterText").val(), gridDetails = $("#kendoGridIndex").data("kendoGrid");

        if ((indexFilterText && indexFilterText.length >= "@Settings.AutoCompleteMinLenght03") || $("#ShowFilterOptionID").val() != "0") {
            gridDetails.dataSource.filter({
                logic: "or",
                filters: [
                    { field: "Reference", operator: "contains", value: indexFilterText },
                    { field: "Code", operator: "contains", value: indexFilterText },
                    { field: "CustomerName", operator: "contains", value: indexFilterText }
                ]
            });


        } else {
            if (gridDetails.dataSource.filter() != undefined)
                gridDetails.dataSource.filter({});
        }
    }

</script>


