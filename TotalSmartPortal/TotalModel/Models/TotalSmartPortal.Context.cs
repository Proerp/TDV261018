//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TotalModel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TotalSmartPortalEntities : DbContext
    {
        public TotalSmartPortalEntities()
            : base("name=TotalSmartPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessControl> AccessControls { get; set; }
        public virtual DbSet<AccountInvoiceDetail> AccountInvoiceDetails { get; set; }
        public virtual DbSet<AccountInvoice> AccountInvoices { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CommodityPrice> CommodityPrices { get; set; }
        public virtual DbSet<CreditNoteDetail> CreditNoteDetails { get; set; }
        public virtual DbSet<CreditNote> CreditNotes { get; set; }
        public virtual DbSet<CustomerCategory> CustomerCategories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<DeliveryAdviceDetail> DeliveryAdviceDetails { get; set; }
        public virtual DbSet<DeliveryAdvice> DeliveryAdvices { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EntireTerritory> EntireTerritories { get; set; }
        public virtual DbSet<GoodsDelivery> GoodsDeliveries { get; set; }
        public virtual DbSet<GoodsDeliveryDetail> GoodsDeliveryDetails { get; set; }
        public virtual DbSet<GoodsIssueDetail> GoodsIssueDetails { get; set; }
        public virtual DbSet<GoodsIssue> GoodsIssues { get; set; }
        public virtual DbSet<HandlingUnitDetail> HandlingUnitDetails { get; set; }
        public virtual DbSet<HandlingUnit> HandlingUnits { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<MonetaryAccount> MonetaryAccounts { get; set; }
        public virtual DbSet<OrganizationalUnit> OrganizationalUnits { get; set; }
        public virtual DbSet<OrganizationalUnitUser> OrganizationalUnitUsers { get; set; }
        public virtual DbSet<PackingMaterial> PackingMaterials { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }
        public virtual DbSet<PriceCategory> PriceCategories { get; set; }
        public virtual DbSet<PromotionCommodityCodePart> PromotionCommodityCodeParts { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<ReceiptDetail> ReceiptDetails { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesReturnDetail> SalesReturnDetails { get; set; }
        public virtual DbSet<SalesReturn> SalesReturns { get; set; }
        public virtual DbSet<Territory> Territories { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VoidType> VoidTypes { get; set; }
        public virtual DbSet<ProductionLine> ProductionLines { get; set; }
        public virtual DbSet<Workshift> Workshifts { get; set; }
        public virtual DbSet<PurchaseRequisitionDetail> PurchaseRequisitionDetails { get; set; }
        public virtual DbSet<PurchaseRequisition> PurchaseRequisitions { get; set; }
        public virtual DbSet<WarehouseAdjustmentType> WarehouseAdjustmentTypes { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<WarehouseAdjustmentDetail> WarehouseAdjustmentDetails { get; set; }
        public virtual DbSet<WarehouseAdjustment> WarehouseAdjustments { get; set; }
        public virtual DbSet<Commodity> Commodities { get; set; }
        public virtual DbSet<CommodityBrand> CommodityBrands { get; set; }
        public virtual DbSet<CommodityCategory> CommodityCategories { get; set; }
        public virtual DbSet<CommodityClass> CommodityClasses { get; set; }
        public virtual DbSet<CommodityLine> CommodityLines { get; set; }
        public virtual DbSet<CommodityType> CommodityTypes { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<FirmOrderDetail> FirmOrderDetails { get; set; }
        public virtual DbSet<FirmOrder> FirmOrders { get; set; }
        public virtual DbSet<PlannedOrderDetail> PlannedOrderDetails { get; set; }
        public virtual DbSet<BomDetail> BomDetails { get; set; }
        public virtual DbSet<Bom> Boms { get; set; }
        public virtual DbSet<FirmOrderMaterial> FirmOrderMaterials { get; set; }
        public virtual DbSet<Mold> Molds { get; set; }
        public virtual DbSet<ProductionOrderDetail> ProductionOrderDetails { get; set; }
        public virtual DbSet<MaterialIssueDetail> MaterialIssueDetails { get; set; }
        public virtual DbSet<MaterialIssue> MaterialIssues { get; set; }
        public virtual DbSet<SemifinishedProductDetail> SemifinishedProductDetails { get; set; }
        public virtual DbSet<SemifinishedProduct> SemifinishedProducts { get; set; }
        public virtual DbSet<FinishedProduct> FinishedProducts { get; set; }
        public virtual DbSet<FinishedProductDetail> FinishedProductDetails { get; set; }
        public virtual DbSet<TransferOrderType> TransferOrderTypes { get; set; }
        public virtual DbSet<WarehouseTransferDetail> WarehouseTransferDetails { get; set; }
        public virtual DbSet<GoodsReceipt> GoodsReceipts { get; set; }
        public virtual DbSet<SemifinishedHandover> SemifinishedHandovers { get; set; }
        public virtual DbSet<SemifinishedHandoverDetail> SemifinishedHandoverDetails { get; set; }
        public virtual DbSet<FinishedHandoverDetail> FinishedHandoverDetails { get; set; }
        public virtual DbSet<GoodsReceiptDetail> GoodsReceiptDetails { get; set; }
        public virtual DbSet<ModuleDetail> ModuleDetails { get; set; }
        public virtual DbSet<ModuleDefault> ModuleDefaults { get; set; }
        public virtual DbSet<FinishedHandover> FinishedHandovers { get; set; }
        public virtual DbSet<TransferOrderDetail> TransferOrderDetails { get; set; }
        public virtual DbSet<FinishedProductPackage> FinishedProductPackages { get; set; }
        public virtual DbSet<PlannedOrder> PlannedOrders { get; set; }
        public virtual DbSet<ProductionOrder> ProductionOrders { get; set; }
        public virtual DbSet<TransferOrder> TransferOrders { get; set; }
        public virtual DbSet<WarehouseTransfer> WarehouseTransfers { get; set; }
    
        public virtual ObjectResult<string> AccountInvoicePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AccountInvoicePostSaveValidate", entityIDParameter);
        }
    
        public virtual int AccountInvoiceSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountInvoiceSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int AddPromotionCustomerCategories(Nullable<int> promotionID, Nullable<int> customerCategoryID)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPromotionCustomerCategories", promotionIDParameter, customerCategoryIDParameter);
        }
    
        public virtual int AddPromotionCustomers(Nullable<int> promotionID, Nullable<int> customerID)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPromotionCustomers", promotionIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<string> CreditNoteApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreditNoteApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CreditNoteEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreditNoteEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> CreditNotePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreditNotePostSaveValidate", entityIDParameter);
        }
    
        public virtual int CreditNoteSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreditNoteSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int CreditNoteToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreditNoteToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<string> CustomerEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerEditable", entityIDParameter);
        }
    
        public virtual int CustomerSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdvicePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdvicePostSaveValidate", entityIDParameter);
        }
    
        public virtual int DeliveryAdviceSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int DeliveryAdviceToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int DeliveryAdviceToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int DeliveryAdviceToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryAdviceToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryAdviceVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryAdviceVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAccessLevel(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAccessLevel", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<AccountInvoiceIndex> GetAccountInvoiceIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountInvoiceIndex>("GetAccountInvoiceIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<AccountInvoiceViewDetail> GetAccountInvoiceViewDetails(Nullable<int> accountInvoiceID)
        {
            var accountInvoiceIDParameter = accountInvoiceID.HasValue ?
                new ObjectParameter("AccountInvoiceID", accountInvoiceID) :
                new ObjectParameter("AccountInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccountInvoiceViewDetail>("GetAccountInvoiceViewDetails", accountInvoiceIDParameter);
        }
    
        public virtual ObjectResult<string> GetAddressees(Nullable<int> customerID, string searchText)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAddressees", customerIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<CommodityAvailable> GetCommodityAvailables(Nullable<int> locationID, Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> priceCategoryID, Nullable<int> applyToSalesVersusReturns, Nullable<int> promotionID, Nullable<System.DateTime> entryDate, string searchText)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var priceCategoryIDParameter = priceCategoryID.HasValue ?
                new ObjectParameter("PriceCategoryID", priceCategoryID) :
                new ObjectParameter("PriceCategoryID", typeof(int));
    
            var applyToSalesVersusReturnsParameter = applyToSalesVersusReturns.HasValue ?
                new ObjectParameter("ApplyToSalesVersusReturns", applyToSalesVersusReturns) :
                new ObjectParameter("ApplyToSalesVersusReturns", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityAvailable>("GetCommodityAvailables", locationIDParameter, customerIDParameter, warehouseIDParameter, priceCategoryIDParameter, applyToSalesVersusReturnsParameter, promotionIDParameter, entryDateParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<CommodityBase> GetCommodityBases(string commodityTypeIDList, Nullable<int> nmvnTaskID, Nullable<int> warehouseID, string searchText)
        {
            var commodityTypeIDListParameter = commodityTypeIDList != null ?
                new ObjectParameter("CommodityTypeIDList", commodityTypeIDList) :
                new ObjectParameter("CommodityTypeIDList", typeof(string));
    
            var nmvnTaskIDParameter = nmvnTaskID.HasValue ?
                new ObjectParameter("NmvnTaskID", nmvnTaskID) :
                new ObjectParameter("NmvnTaskID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBase>("GetCommodityBases", commodityTypeIDListParameter, nmvnTaskIDParameter, warehouseIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<CommodityCodePart> GetCommodityCodePartA(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityCodePart>("GetCommodityCodePartA", searchTextParameter);
        }
    
        public virtual ObjectResult<CommodityCodePart> GetCommodityCodePartB(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityCodePart>("GetCommodityCodePartB", searchTextParameter);
        }
    
        public virtual ObjectResult<CommodityCodePart> GetCommodityCodePartC(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityCodePart>("GetCommodityCodePartC", searchTextParameter);
        }
    
        public virtual ObjectResult<CommodityPriceIndex> GetCommodityPriceIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityPriceIndex>("GetCommodityPriceIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CreditNoteIndex> GetCreditNoteIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreditNoteIndex>("GetCreditNoteIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CustomerBase> GetCustomerBases(string searchText, Nullable<int> warehouseTaskID)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var warehouseTaskIDParameter = warehouseTaskID.HasValue ?
                new ObjectParameter("WarehouseTaskID", warehouseTaskID) :
                new ObjectParameter("WarehouseTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerBase>("GetCustomerBases", searchTextParameter, warehouseTaskIDParameter);
        }
    
        public virtual ObjectResult<CustomerIndex> GetCustomerIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerIndex>("GetCustomerIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CustomerReceivable> GetCustomerReceivables(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerReceivable>("GetCustomerReceivables", locationIDParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceIndex> GetDeliveryAdviceIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> pendingOnly)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pendingOnlyParameter = pendingOnly.HasValue ?
                new ObjectParameter("PendingOnly", pendingOnly) :
                new ObjectParameter("PendingOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceIndex>("GetDeliveryAdviceIndexes", aspUserIDParameter, fromDateParameter, toDateParameter, pendingOnlyParameter);
        }
    
        public virtual ObjectResult<DeliveryAdvicePendingCustomer> GetDeliveryAdvicePendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdvicePendingCustomer>("GetDeliveryAdvicePendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<DeliveryAdvicePendingSalesOrderDetail> GetDeliveryAdvicePendingSalesOrderDetails(Nullable<int> locationID, Nullable<int> deliveryAdviceID, Nullable<int> salesOrderID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<int> priceCategoryID, Nullable<int> warehouseID, string shippingAddress, string addressee, Nullable<int> tradePromotionID, Nullable<decimal> vATPercent, Nullable<System.DateTime> entryDate, string salesOrderDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var priceCategoryIDParameter = priceCategoryID.HasValue ?
                new ObjectParameter("PriceCategoryID", priceCategoryID) :
                new ObjectParameter("PriceCategoryID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var addresseeParameter = addressee != null ?
                new ObjectParameter("Addressee", addressee) :
                new ObjectParameter("Addressee", typeof(string));
    
            var tradePromotionIDParameter = tradePromotionID.HasValue ?
                new ObjectParameter("TradePromotionID", tradePromotionID) :
                new ObjectParameter("TradePromotionID", typeof(int));
    
            var vATPercentParameter = vATPercent.HasValue ?
                new ObjectParameter("VATPercent", vATPercent) :
                new ObjectParameter("VATPercent", typeof(decimal));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var salesOrderDetailIDsParameter = salesOrderDetailIDs != null ?
                new ObjectParameter("SalesOrderDetailIDs", salesOrderDetailIDs) :
                new ObjectParameter("SalesOrderDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdvicePendingSalesOrderDetail>("GetDeliveryAdvicePendingSalesOrderDetails", locationIDParameter, deliveryAdviceIDParameter, salesOrderIDParameter, customerIDParameter, receiverIDParameter, priceCategoryIDParameter, warehouseIDParameter, shippingAddressParameter, addresseeParameter, tradePromotionIDParameter, vATPercentParameter, entryDateParameter, salesOrderDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<DeliveryAdvicePendingSalesOrder> GetDeliveryAdvicePendingSalesOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdvicePendingSalesOrder>("GetDeliveryAdvicePendingSalesOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<DeliveryAdviceViewDetail> GetDeliveryAdviceViewDetails(Nullable<int> deliveryAdviceID)
        {
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryAdviceViewDetail>("GetDeliveryAdviceViewDetails", deliveryAdviceIDParameter);
        }
    
        public virtual ObjectResult<EmployeeIndex> GetEmployeeIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeIndex>("GetEmployeeIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsDeliveryIndex> GetGoodsDeliveryIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsDeliveryIndex>("GetGoodsDeliveryIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsDeliveryViewDetail> GetGoodsDeliveryViewDetails(Nullable<int> goodsDeliveryID)
        {
            var goodsDeliveryIDParameter = goodsDeliveryID.HasValue ?
                new ObjectParameter("GoodsDeliveryID", goodsDeliveryID) :
                new ObjectParameter("GoodsDeliveryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsDeliveryViewDetail>("GetGoodsDeliveryViewDetails", goodsDeliveryIDParameter);
        }
    
        public virtual ObjectResult<GoodsIssueIndex> GetGoodsIssueIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueIndex>("GetGoodsIssueIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsIssueReceivable> GetGoodsIssueReceivables(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueReceivable>("GetGoodsIssueReceivables", locationIDParameter);
        }
    
        public virtual ObjectResult<GoodsIssueViewDetail> GetGoodsIssueViewDetails(Nullable<int> goodsIssueID, Nullable<int> locationID, Nullable<int> deliveryAdviceID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<int> warehouseID, string shippingAddress, string addressee, Nullable<int> tradePromotionID, Nullable<decimal> vATPercent, Nullable<bool> isReadonly)
        {
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var deliveryAdviceIDParameter = deliveryAdviceID.HasValue ?
                new ObjectParameter("DeliveryAdviceID", deliveryAdviceID) :
                new ObjectParameter("DeliveryAdviceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var addresseeParameter = addressee != null ?
                new ObjectParameter("Addressee", addressee) :
                new ObjectParameter("Addressee", typeof(string));
    
            var tradePromotionIDParameter = tradePromotionID.HasValue ?
                new ObjectParameter("TradePromotionID", tradePromotionID) :
                new ObjectParameter("TradePromotionID", typeof(int));
    
            var vATPercentParameter = vATPercent.HasValue ?
                new ObjectParameter("VATPercent", vATPercent) :
                new ObjectParameter("VATPercent", typeof(decimal));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsIssueViewDetail>("GetGoodsIssueViewDetails", goodsIssueIDParameter, locationIDParameter, deliveryAdviceIDParameter, customerIDParameter, receiverIDParameter, warehouseIDParameter, shippingAddressParameter, addresseeParameter, tradePromotionIDParameter, vATPercentParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<HandlingUnitIndex> GetHandlingUnitIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HandlingUnitIndex>("GetHandlingUnitIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<HandlingUnitPendingCustomer> GetHandlingUnitPendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HandlingUnitPendingCustomer>("GetHandlingUnitPendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<HandlingUnitPendingGoodsIssueDetail> GetHandlingUnitPendingGoodsIssueDetails(Nullable<int> locationID, Nullable<int> handlingUnitID, Nullable<int> goodsIssueID, Nullable<int> customerID, Nullable<int> receiverID, string shippingAddress, string addressee, string goodsIssueDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var handlingUnitIDParameter = handlingUnitID.HasValue ?
                new ObjectParameter("HandlingUnitID", handlingUnitID) :
                new ObjectParameter("HandlingUnitID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var addresseeParameter = addressee != null ?
                new ObjectParameter("Addressee", addressee) :
                new ObjectParameter("Addressee", typeof(string));
    
            var goodsIssueDetailIDsParameter = goodsIssueDetailIDs != null ?
                new ObjectParameter("GoodsIssueDetailIDs", goodsIssueDetailIDs) :
                new ObjectParameter("GoodsIssueDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HandlingUnitPendingGoodsIssueDetail>("GetHandlingUnitPendingGoodsIssueDetails", locationIDParameter, handlingUnitIDParameter, goodsIssueIDParameter, customerIDParameter, receiverIDParameter, shippingAddressParameter, addresseeParameter, goodsIssueDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<HandlingUnitPendingGoodsIssue> GetHandlingUnitPendingGoodsIssues(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HandlingUnitPendingGoodsIssue>("GetHandlingUnitPendingGoodsIssues", locationIDParameter);
        }
    
        public virtual ObjectResult<HandlingUnitViewDetail> GetHandlingUnitViewDetails(Nullable<int> handlingUnitID)
        {
            var handlingUnitIDParameter = handlingUnitID.HasValue ?
                new ObjectParameter("HandlingUnitID", handlingUnitID) :
                new ObjectParameter("HandlingUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HandlingUnitViewDetail>("GetHandlingUnitViewDetails", handlingUnitIDParameter);
        }
    
        public virtual ObjectResult<LocationOrganizationalUnit> GetLocationOrganizationalUnits(Nullable<int> nothing)
        {
            var nothingParameter = nothing.HasValue ?
                new ObjectParameter("Nothing", nothing) :
                new ObjectParameter("Nothing", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationOrganizationalUnit>("GetLocationOrganizationalUnits", nothingParameter);
        }
    
        [DbFunction("TotalSmartPortalEntities", "GetOverStockItems")]
        public virtual IQueryable<OverStockItem> GetOverStockItems(Nullable<System.DateTime> lSKUActionDate)
        {
            var lSKUActionDateParameter = lSKUActionDate.HasValue ?
                new ObjectParameter("lSKUActionDate", lSKUActionDate) :
                new ObjectParameter("lSKUActionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<OverStockItem>("[TotalSmartPortalEntities].[GetOverStockItems](@lSKUActionDate)", lSKUActionDateParameter);
        }
    
        public virtual ObjectResult<PendingCustomerCredit> GetPendingCustomerCredits(Nullable<int> locationID, Nullable<int> customerID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingCustomerCredit>("GetPendingCustomerCredits", locationIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceCustomer> GetPendingDeliveryAdviceCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceCustomer>("GetPendingDeliveryAdviceCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdviceDescription> GetPendingDeliveryAdviceDescriptions(Nullable<int> locationID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<int> warehouseID, string shippingAddress, string addressee, Nullable<int> tradePromotionID, Nullable<decimal> vATPercent)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var addresseeParameter = addressee != null ?
                new ObjectParameter("Addressee", addressee) :
                new ObjectParameter("Addressee", typeof(string));
    
            var tradePromotionIDParameter = tradePromotionID.HasValue ?
                new ObjectParameter("TradePromotionID", tradePromotionID) :
                new ObjectParameter("TradePromotionID", typeof(int));
    
            var vATPercentParameter = vATPercent.HasValue ?
                new ObjectParameter("VATPercent", vATPercent) :
                new ObjectParameter("VATPercent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdviceDescription>("GetPendingDeliveryAdviceDescriptions", locationIDParameter, customerIDParameter, receiverIDParameter, warehouseIDParameter, shippingAddressParameter, addresseeParameter, tradePromotionIDParameter, vATPercentParameter);
        }
    
        public virtual ObjectResult<PendingDeliveryAdvice> GetPendingDeliveryAdvices(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingDeliveryAdvice>("GetPendingDeliveryAdvices", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueConsumer> GetPendingGoodsIssueConsumers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueConsumer>("GetPendingGoodsIssueConsumers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueDetail> GetPendingGoodsIssueDetails(Nullable<int> accountInvoiceID, Nullable<int> locationID, Nullable<int> goodsIssueID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<int> tradePromotionID, Nullable<decimal> vATPercent, Nullable<int> commodityTypeID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string goodsIssueDetailIDs, Nullable<bool> isReadonly)
        {
            var accountInvoiceIDParameter = accountInvoiceID.HasValue ?
                new ObjectParameter("AccountInvoiceID", accountInvoiceID) :
                new ObjectParameter("AccountInvoiceID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var tradePromotionIDParameter = tradePromotionID.HasValue ?
                new ObjectParameter("TradePromotionID", tradePromotionID) :
                new ObjectParameter("TradePromotionID", typeof(int));
    
            var vATPercentParameter = vATPercent.HasValue ?
                new ObjectParameter("VATPercent", vATPercent) :
                new ObjectParameter("VATPercent", typeof(decimal));
    
            var commodityTypeIDParameter = commodityTypeID.HasValue ?
                new ObjectParameter("CommodityTypeID", commodityTypeID) :
                new ObjectParameter("CommodityTypeID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var goodsIssueDetailIDsParameter = goodsIssueDetailIDs != null ?
                new ObjectParameter("GoodsIssueDetailIDs", goodsIssueDetailIDs) :
                new ObjectParameter("GoodsIssueDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueDetail>("GetPendingGoodsIssueDetails", accountInvoiceIDParameter, locationIDParameter, goodsIssueIDParameter, customerIDParameter, receiverIDParameter, tradePromotionIDParameter, vATPercentParameter, commodityTypeIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter, goodsIssueDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssueReceiver> GetPendingGoodsIssueReceivers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssueReceiver>("GetPendingGoodsIssueReceivers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingGoodsIssue> GetPendingGoodsIssues(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingGoodsIssue>("GetPendingGoodsIssues", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingHandlingUnitReceiver> GetPendingHandlingUnitReceivers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingHandlingUnitReceiver>("GetPendingHandlingUnitReceivers", locationIDParameter);
        }
    
        public virtual ObjectResult<PendingHandlingUnit> GetPendingHandlingUnits(Nullable<int> goodsDeliveryID, Nullable<int> receiverID, string handlingUnitIDs, Nullable<bool> isReadonly)
        {
            var goodsDeliveryIDParameter = goodsDeliveryID.HasValue ?
                new ObjectParameter("GoodsDeliveryID", goodsDeliveryID) :
                new ObjectParameter("GoodsDeliveryID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var handlingUnitIDsParameter = handlingUnitIDs != null ?
                new ObjectParameter("HandlingUnitIDs", handlingUnitIDs) :
                new ObjectParameter("HandlingUnitIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingHandlingUnit>("GetPendingHandlingUnits", goodsDeliveryIDParameter, receiverIDParameter, handlingUnitIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<Promotion> GetPromotionByCustomers(Nullable<int> customerID, Nullable<int> applyToSalesVersusReturns, Nullable<int> filterApplyToTradeDiscount)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applyToSalesVersusReturnsParameter = applyToSalesVersusReturns.HasValue ?
                new ObjectParameter("ApplyToSalesVersusReturns", applyToSalesVersusReturns) :
                new ObjectParameter("ApplyToSalesVersusReturns", typeof(int));
    
            var filterApplyToTradeDiscountParameter = filterApplyToTradeDiscount.HasValue ?
                new ObjectParameter("FilterApplyToTradeDiscount", filterApplyToTradeDiscount) :
                new ObjectParameter("FilterApplyToTradeDiscount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Promotion>("GetPromotionByCustomers", customerIDParameter, applyToSalesVersusReturnsParameter, filterApplyToTradeDiscountParameter);
        }
    
        public virtual ObjectResult<Promotion> GetPromotionByCustomers(Nullable<int> customerID, Nullable<int> applyToSalesVersusReturns, Nullable<int> filterApplyToTradeDiscount, MergeOption mergeOption)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applyToSalesVersusReturnsParameter = applyToSalesVersusReturns.HasValue ?
                new ObjectParameter("ApplyToSalesVersusReturns", applyToSalesVersusReturns) :
                new ObjectParameter("ApplyToSalesVersusReturns", typeof(int));
    
            var filterApplyToTradeDiscountParameter = filterApplyToTradeDiscount.HasValue ?
                new ObjectParameter("FilterApplyToTradeDiscount", filterApplyToTradeDiscount) :
                new ObjectParameter("FilterApplyToTradeDiscount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Promotion>("GetPromotionByCustomers", mergeOption, customerIDParameter, applyToSalesVersusReturnsParameter, filterApplyToTradeDiscountParameter);
        }
    
        public virtual ObjectResult<CustomerCategory> GetPromotionCustomerCategories(Nullable<int> promotionID)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCategory>("GetPromotionCustomerCategories", promotionIDParameter);
        }
    
        public virtual ObjectResult<CustomerCategory> GetPromotionCustomerCategories(Nullable<int> promotionID, MergeOption mergeOption)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCategory>("GetPromotionCustomerCategories", mergeOption, promotionIDParameter);
        }
    
        public virtual ObjectResult<PromotionIndex> GetPromotionIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PromotionIndex>("GetPromotionIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ReceiptIndex> GetReceiptIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptIndex>("GetReceiptIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ReceiptViewDetail> GetReceiptViewDetails(Nullable<int> receiptID, Nullable<int> locationID, Nullable<int> goodsIssueID, Nullable<int> customerID, Nullable<bool> isReadonly)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiptViewDetail>("GetReceiptViewDetails", receiptIDParameter, locationIDParameter, goodsIssueIDParameter, customerIDParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<Report> GetReportIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report>("GetReportIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Report> GetReportIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, MergeOption mergeOption)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report>("GetReportIndexes", mergeOption, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesOrderIndex> GetSalesOrderIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderIndex>("GetSalesOrderIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesOrderViewDetail> GetSalesOrderViewDetails(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesOrderViewDetail>("GetSalesOrderViewDetails", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<SalesReturnIndex> GetSalesReturnIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReturnIndex>("GetSalesReturnIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesReturnPendingGoodsIssueDetail> GetSalesReturnPendingGoodsIssueDetails(Nullable<int> locationID, Nullable<int> salesReturnID, Nullable<int> goodsIssueID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<int> tradePromotionID, Nullable<decimal> vATPercent, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string goodsIssueDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var salesReturnIDParameter = salesReturnID.HasValue ?
                new ObjectParameter("SalesReturnID", salesReturnID) :
                new ObjectParameter("SalesReturnID", typeof(int));
    
            var goodsIssueIDParameter = goodsIssueID.HasValue ?
                new ObjectParameter("GoodsIssueID", goodsIssueID) :
                new ObjectParameter("GoodsIssueID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var tradePromotionIDParameter = tradePromotionID.HasValue ?
                new ObjectParameter("TradePromotionID", tradePromotionID) :
                new ObjectParameter("TradePromotionID", typeof(int));
    
            var vATPercentParameter = vATPercent.HasValue ?
                new ObjectParameter("VATPercent", vATPercent) :
                new ObjectParameter("VATPercent", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var goodsIssueDetailIDsParameter = goodsIssueDetailIDs != null ?
                new ObjectParameter("GoodsIssueDetailIDs", goodsIssueDetailIDs) :
                new ObjectParameter("GoodsIssueDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReturnPendingGoodsIssueDetail>("GetSalesReturnPendingGoodsIssueDetails", locationIDParameter, salesReturnIDParameter, goodsIssueIDParameter, customerIDParameter, receiverIDParameter, tradePromotionIDParameter, vATPercentParameter, fromDateParameter, toDateParameter, goodsIssueDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<SalesReturnPendingGoodsIssue> GetSalesReturnPendingGoodsIssues(Nullable<int> locationID, Nullable<int> customerID, Nullable<int> receiverID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReturnPendingGoodsIssue>("GetSalesReturnPendingGoodsIssues", locationIDParameter, customerIDParameter, receiverIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SalesReturnViewDetail> GetSalesReturnViewDetails(Nullable<int> salesReturnID)
        {
            var salesReturnIDParameter = salesReturnID.HasValue ?
                new ObjectParameter("SalesReturnID", salesReturnID) :
                new ObjectParameter("SalesReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesReturnViewDetail>("GetSalesReturnViewDetails", salesReturnIDParameter);
        }
    
        public virtual ObjectResult<string> GetShippingAddress(Nullable<int> customerID, string searchText)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetShippingAddress", customerIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetShowDiscount(Nullable<int> userID, Nullable<int> nMVNTaskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetShowDiscount", userIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetShowDiscountByCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetShowDiscountByCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<TaskIndex> GetTaskIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskIndex>("GetTaskIndexes");
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnApprovalPermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnApprovalPermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetUnVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetUnVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<UserAccessControl> GetUserAccessControls(Nullable<int> userID, Nullable<int> nMVNTaskID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAccessControl>("GetUserAccessControls", userIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<UserIndex> GetUserIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> activeOption)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var activeOptionParameter = activeOption.HasValue ?
                new ObjectParameter("ActiveOption", activeOption) :
                new ObjectParameter("ActiveOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserIndex>("GetUserIndexes", aspUserIDParameter, fromDateParameter, toDateParameter, activeOptionParameter);
        }
    
        public virtual ObjectResult<UserReportControl> GetUserReportControls(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserReportControl>("GetUserReportControls", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetVoidablePermitted(Nullable<int> userID, Nullable<int> nMVNTaskID, Nullable<int> organizationalUnitID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetVoidablePermitted", userIDParameter, nMVNTaskIDParameter, organizationalUnitIDParameter);
        }
    
        public virtual ObjectResult<Warehouse> GetWarehouses(Nullable<int> customerID, string searchText, string warehouseTaskIDList)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var warehouseTaskIDListParameter = warehouseTaskIDList != null ?
                new ObjectParameter("WarehouseTaskIDList", warehouseTaskIDList) :
                new ObjectParameter("WarehouseTaskIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse>("GetWarehouses", customerIDParameter, searchTextParameter, warehouseTaskIDListParameter);
        }
    
        public virtual ObjectResult<Warehouse> GetWarehouses(Nullable<int> customerID, string searchText, string warehouseTaskIDList, MergeOption mergeOption)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var warehouseTaskIDListParameter = warehouseTaskIDList != null ?
                new ObjectParameter("WarehouseTaskIDList", warehouseTaskIDList) :
                new ObjectParameter("WarehouseTaskIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse>("GetWarehouses", mergeOption, customerIDParameter, searchTextParameter, warehouseTaskIDListParameter);
        }
    
        public virtual ObjectResult<string> GoodsDeliveryPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsDeliveryPostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsDeliverySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsDeliverySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssueEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssueEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsIssuePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsIssuePostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsIssueSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsIssueToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsIssueToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<string> HandlingUnitEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("HandlingUnitEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> HandlingUnitPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("HandlingUnitPostSaveValidate", entityIDParameter);
        }
    
        public virtual int HandlingUnitSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HandlingUnitSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<string> PromotionApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PromotionApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PromotionDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PromotionDeletable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PromotionEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PromotionEditable", entityIDParameter);
        }
    
        public virtual int PromotionSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PromotionSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int PromotionToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PromotionToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int PromotionToggleVoid(Nullable<int> entityID, Nullable<bool> inActive)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PromotionToggleVoid", entityIDParameter, inActiveParameter);
        }
    
        public virtual ObjectResult<string> PromotionVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PromotionVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> ReceiptEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ReceiptEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> ReceiptPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ReceiptPostSaveValidate", entityIDParameter);
        }
    
        public virtual int ReceiptSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReceiptSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int RemovePromotionCustomerCategories(Nullable<int> promotionID, Nullable<int> customerCategoryID)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePromotionCustomerCategories", promotionIDParameter, customerCategoryIDParameter);
        }
    
        public virtual int RemovePromotionCustomers(Nullable<int> promotionID, Nullable<int> customerID)
        {
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePromotionCustomers", promotionIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SalesOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int SalesOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int SalesOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int SalesOrderToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesOrderToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> SalesOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesOrderVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesReturnApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesReturnApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesReturnEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesReturnEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SalesReturnPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesReturnPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SalesReturnSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesReturnSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int SalesReturnToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesReturnToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<string> SalesReturnVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SalesReturnVoidable", entityIDParameter);
        }
    
        public virtual int SaveUserAccessControls(Nullable<int> accessControlID, Nullable<int> accessLevel, Nullable<bool> approvalPermitted, Nullable<bool> unApprovalPermitted, Nullable<bool> voidablePermitted, Nullable<bool> unVoidablePermitted, Nullable<bool> showDiscount)
        {
            var accessControlIDParameter = accessControlID.HasValue ?
                new ObjectParameter("AccessControlID", accessControlID) :
                new ObjectParameter("AccessControlID", typeof(int));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            var approvalPermittedParameter = approvalPermitted.HasValue ?
                new ObjectParameter("ApprovalPermitted", approvalPermitted) :
                new ObjectParameter("ApprovalPermitted", typeof(bool));
    
            var unApprovalPermittedParameter = unApprovalPermitted.HasValue ?
                new ObjectParameter("UnApprovalPermitted", unApprovalPermitted) :
                new ObjectParameter("UnApprovalPermitted", typeof(bool));
    
            var voidablePermittedParameter = voidablePermitted.HasValue ?
                new ObjectParameter("VoidablePermitted", voidablePermitted) :
                new ObjectParameter("VoidablePermitted", typeof(bool));
    
            var unVoidablePermittedParameter = unVoidablePermitted.HasValue ?
                new ObjectParameter("UnVoidablePermitted", unVoidablePermitted) :
                new ObjectParameter("UnVoidablePermitted", typeof(bool));
    
            var showDiscountParameter = showDiscount.HasValue ?
                new ObjectParameter("ShowDiscount", showDiscount) :
                new ObjectParameter("ShowDiscount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserAccessControls", accessControlIDParameter, accessLevelParameter, approvalPermittedParameter, unApprovalPermittedParameter, voidablePermittedParameter, unVoidablePermittedParameter, showDiscountParameter);
        }
    
        public virtual int SaveUserReportControls(Nullable<int> reportControlID, Nullable<bool> enabled)
        {
            var reportControlIDParameter = reportControlID.HasValue ?
                new ObjectParameter("ReportControlID", reportControlID) :
                new ObjectParameter("ReportControlID", typeof(int));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveUserReportControls", reportControlIDParameter, enabledParameter);
        }
    
        public virtual ObjectResult<WarehouseEntry> SearchWarehouseEntries(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string codePartA, string codePartB)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var codePartAParameter = codePartA != null ?
                new ObjectParameter("CodePartA", codePartA) :
                new ObjectParameter("CodePartA", typeof(string));
    
            var codePartBParameter = codePartB != null ?
                new ObjectParameter("CodePartB", codePartB) :
                new ObjectParameter("CodePartB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseEntry>("SearchWarehouseEntries", aspUserIDParameter, fromDateParameter, toDateParameter, codePartAParameter, codePartBParameter);
        }
    
        public virtual int UpdateLockedDate(string aspUserID, Nullable<int> locationID, Nullable<System.DateTime> lockedDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var lockedDateParameter = lockedDate.HasValue ?
                new ObjectParameter("LockedDate", lockedDate) :
                new ObjectParameter("LockedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLockedDate", aspUserIDParameter, locationIDParameter, lockedDateParameter);
        }
    
        public virtual ObjectResult<string> UserEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserEditable", entityIDParameter);
        }
    
        public virtual int UserRegister(Nullable<int> userID, Nullable<int> organizationalUnitID, Nullable<int> sameOUAccessLevel, Nullable<int> sameLocationAccessLevel, Nullable<int> otherOUAccessLevel)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var organizationalUnitIDParameter = organizationalUnitID.HasValue ?
                new ObjectParameter("OrganizationalUnitID", organizationalUnitID) :
                new ObjectParameter("OrganizationalUnitID", typeof(int));
    
            var sameOUAccessLevelParameter = sameOUAccessLevel.HasValue ?
                new ObjectParameter("SameOUAccessLevel", sameOUAccessLevel) :
                new ObjectParameter("SameOUAccessLevel", typeof(int));
    
            var sameLocationAccessLevelParameter = sameLocationAccessLevel.HasValue ?
                new ObjectParameter("SameLocationAccessLevel", sameLocationAccessLevel) :
                new ObjectParameter("SameLocationAccessLevel", typeof(int));
    
            var otherOUAccessLevelParameter = otherOUAccessLevel.HasValue ?
                new ObjectParameter("OtherOUAccessLevel", otherOUAccessLevel) :
                new ObjectParameter("OtherOUAccessLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserRegister", userIDParameter, organizationalUnitIDParameter, sameOUAccessLevelParameter, sameLocationAccessLevelParameter, otherOUAccessLevelParameter);
        }
    
        public virtual int UserToggleVoid(Nullable<int> entityID, Nullable<bool> inActive)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserToggleVoid", entityIDParameter, inActiveParameter);
        }
    
        public virtual int UserUnregister(Nullable<int> userID, string userName, string organizationalUnitName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var organizationalUnitNameParameter = organizationalUnitName != null ?
                new ObjectParameter("OrganizationalUnitName", organizationalUnitName) :
                new ObjectParameter("OrganizationalUnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserUnregister", userIDParameter, userNameParameter, organizationalUnitNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetStoredID(Nullable<int> configID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetStoredID", configIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVersionID(Nullable<int> configID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVersionID", configIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetVersionValidate(Nullable<int> configID, Nullable<int> versionID)
        {
            var configIDParameter = configID.HasValue ?
                new ObjectParameter("ConfigID", configID) :
                new ObjectParameter("ConfigID", typeof(int));
    
            var versionIDParameter = versionID.HasValue ?
                new ObjectParameter("VersionID", versionID) :
                new ObjectParameter("VersionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetVersionValidate", configIDParameter, versionIDParameter);
        }
    
        public virtual ObjectResult<PurchaseRequisitionIndex> GetPurchaseRequisitionIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseRequisitionIndex>("GetPurchaseRequisitionIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PurchaseRequisitionViewDetail> GetPurchaseRequisitionViewDetails(Nullable<int> purchaseRequisitionID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseRequisitionViewDetail>("GetPurchaseRequisitionViewDetails", purchaseRequisitionIDParameter);
        }
    
        public virtual ObjectResult<string> PurchaseRequisitionApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PurchaseRequisitionApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PurchaseRequisitionEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PurchaseRequisitionEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PurchaseRequisitionPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PurchaseRequisitionPostSaveValidate", entityIDParameter);
        }
    
        public virtual int PurchaseRequisitionSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseRequisitionSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int PurchaseRequisitionToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseRequisitionToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int PurchaseRequisitionToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseRequisitionToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int PurchaseRequisitionToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseRequisitionToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> PurchaseRequisitionVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PurchaseRequisitionVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptIndex> GetGoodsReceiptIndexes(Nullable<int> nMVNTaskID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptIndex>("GetGoodsReceiptIndexes", nMVNTaskIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingCustomer> GetGoodsReceiptPendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingCustomer>("GetGoodsReceiptPendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingPurchaseRequisitionDetail> GetGoodsReceiptPendingPurchaseRequisitionDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> purchaseRequisitionID, Nullable<int> customerID, string purchaseRequisitionDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var purchaseRequisitionDetailIDsParameter = purchaseRequisitionDetailIDs != null ?
                new ObjectParameter("PurchaseRequisitionDetailIDs", purchaseRequisitionDetailIDs) :
                new ObjectParameter("PurchaseRequisitionDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingPurchaseRequisitionDetail>("GetGoodsReceiptPendingPurchaseRequisitionDetails", locationIDParameter, goodsReceiptIDParameter, purchaseRequisitionIDParameter, customerIDParameter, purchaseRequisitionDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingPurchaseRequisition> GetGoodsReceiptPendingPurchaseRequisitions(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingPurchaseRequisition>("GetGoodsReceiptPendingPurchaseRequisitions", locationIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> GoodsReceiptPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GoodsReceiptPostSaveValidate", entityIDParameter);
        }
    
        public virtual int GoodsReceiptSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int GoodsReceiptToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GoodsReceiptToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<ProductionOrderIndex> GetProductionOrderIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionOrderIndex>("GetProductionOrderIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> ProductionOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductionOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> ProductionOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductionOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> ProductionOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductionOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int ProductionOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductionOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int ProductionOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductionOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int ProductionOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductionOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int ProductionOrderToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductionOrderToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> ProductionOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductionOrderVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<MoldBase> GetMoldBases(string searchText, Nullable<int> commodityID)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MoldBase>("GetMoldBases", searchTextParameter, commodityIDParameter);
        }
    
        public virtual ObjectResult<ProductionLineBase> GetProductionLineBases(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionLineBase>("GetProductionLineBases", searchTextParameter);
        }
    
        public virtual ObjectResult<MaterialIssueIndex> GetMaterialIssueIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaterialIssueIndex>("GetMaterialIssueIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<MaterialIssueViewDetail> GetMaterialIssueViewDetails(Nullable<int> materialIssueID)
        {
            var materialIssueIDParameter = materialIssueID.HasValue ?
                new ObjectParameter("MaterialIssueID", materialIssueID) :
                new ObjectParameter("MaterialIssueID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaterialIssueViewDetail>("GetMaterialIssueViewDetails", materialIssueIDParameter);
        }
    
        public virtual ObjectResult<string> MaterialIssueApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MaterialIssueApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> MaterialIssueEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MaterialIssueEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> MaterialIssuePostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MaterialIssuePostSaveValidate", entityIDParameter);
        }
    
        public virtual int MaterialIssueSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MaterialIssueSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int MaterialIssueToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MaterialIssueToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<PlannedOrderIndex> GetPlannedOrderIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlannedOrderIndex>("GetPlannedOrderIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PlannedOrderViewDetail> GetPlannedOrderViewDetails(Nullable<int> plannedOrderID)
        {
            var plannedOrderIDParameter = plannedOrderID.HasValue ?
                new ObjectParameter("PlannedOrderID", plannedOrderID) :
                new ObjectParameter("PlannedOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlannedOrderViewDetail>("GetPlannedOrderViewDetails", plannedOrderIDParameter);
        }
    
        public virtual ObjectResult<string> PlannedOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PlannedOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PlannedOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PlannedOrderEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> PlannedOrderPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PlannedOrderPostSaveValidate", entityIDParameter);
        }
    
        public virtual int PlannedOrderSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PlannedOrderSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int PlannedOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PlannedOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int PlannedOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PlannedOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int PlannedOrderToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PlannedOrderToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> PlannedOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PlannedOrderVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<ProductionOrderPendingCustomer> GetProductionOrderPendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionOrderPendingCustomer>("GetProductionOrderPendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<ProductionOrderPendingPlannedOrder> GetProductionOrderPendingPlannedOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionOrderPendingPlannedOrder>("GetProductionOrderPendingPlannedOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentIndex> GetWarehouseAdjustmentIndexes(Nullable<int> nMVNTaskID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentIndex>("GetWarehouseAdjustmentIndexes", nMVNTaskIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseAdjustmentViewDetail> GetWarehouseAdjustmentViewDetails(Nullable<int> warehouseAdjustmentID)
        {
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseAdjustmentViewDetail>("GetWarehouseAdjustmentViewDetails", warehouseAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseAdjustmentPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseAdjustmentPostSaveValidate", entityIDParameter);
        }
    
        public virtual int WarehouseAdjustmentSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int WarehouseAdjustmentToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseAdjustmentToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptDetailAvailable> GetGoodsReceiptDetailAvailables(Nullable<int> locationID, Nullable<int> warehouseID, Nullable<int> commodityID, string commodityIDs, Nullable<int> batchID, string goodsReceiptDetailIDs, Nullable<bool> onlyApproved, Nullable<bool> onlyIssuable)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var commodityIDsParameter = commodityIDs != null ?
                new ObjectParameter("CommodityIDs", commodityIDs) :
                new ObjectParameter("CommodityIDs", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var goodsReceiptDetailIDsParameter = goodsReceiptDetailIDs != null ?
                new ObjectParameter("GoodsReceiptDetailIDs", goodsReceiptDetailIDs) :
                new ObjectParameter("GoodsReceiptDetailIDs", typeof(string));
    
            var onlyApprovedParameter = onlyApproved.HasValue ?
                new ObjectParameter("OnlyApproved", onlyApproved) :
                new ObjectParameter("OnlyApproved", typeof(bool));
    
            var onlyIssuableParameter = onlyIssuable.HasValue ?
                new ObjectParameter("OnlyIssuable", onlyIssuable) :
                new ObjectParameter("OnlyIssuable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptDetailAvailable>("GetGoodsReceiptDetailAvailables", locationIDParameter, warehouseIDParameter, commodityIDParameter, commodityIDsParameter, batchIDParameter, goodsReceiptDetailIDsParameter, onlyApprovedParameter, onlyIssuableParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetGoodsReceiptIDofWarehouseAdjustment(Nullable<int> warehouseAdjustmentID)
        {
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetGoodsReceiptIDofWarehouseAdjustment", warehouseAdjustmentIDParameter);
        }
    
        public virtual ObjectResult<PendingWarehouseAdjustmentDetail> GetPendingWarehouseAdjustmentDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> warehouseAdjustmentID, Nullable<int> warehouseID, string warehouseAdjustmentDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var warehouseAdjustmentIDParameter = warehouseAdjustmentID.HasValue ?
                new ObjectParameter("WarehouseAdjustmentID", warehouseAdjustmentID) :
                new ObjectParameter("WarehouseAdjustmentID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var warehouseAdjustmentDetailIDsParameter = warehouseAdjustmentDetailIDs != null ?
                new ObjectParameter("WarehouseAdjustmentDetailIDs", warehouseAdjustmentDetailIDs) :
                new ObjectParameter("WarehouseAdjustmentDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingWarehouseAdjustmentDetail>("GetPendingWarehouseAdjustmentDetails", locationIDParameter, goodsReceiptIDParameter, warehouseAdjustmentIDParameter, warehouseIDParameter, warehouseAdjustmentDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<CommodityIndex> GetCommodityIndexes(Nullable<int> nMVNTaskID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityIndex>("GetCommodityIndexes", nMVNTaskIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> CommodityEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<BomBase> GetBomBases(string searchText, Nullable<int> commodityID, Nullable<int> commodityCategoryID, Nullable<int> commodityClassID, Nullable<int> commodityLineID)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var commodityCategoryIDParameter = commodityCategoryID.HasValue ?
                new ObjectParameter("CommodityCategoryID", commodityCategoryID) :
                new ObjectParameter("CommodityCategoryID", typeof(int));
    
            var commodityClassIDParameter = commodityClassID.HasValue ?
                new ObjectParameter("CommodityClassID", commodityClassID) :
                new ObjectParameter("CommodityClassID", typeof(int));
    
            var commodityLineIDParameter = commodityLineID.HasValue ?
                new ObjectParameter("CommodityLineID", commodityLineID) :
                new ObjectParameter("CommodityLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BomBase>("GetBomBases", searchTextParameter, commodityIDParameter, commodityCategoryIDParameter, commodityClassIDParameter, commodityLineIDParameter);
        }
    
        public virtual ObjectResult<ProductionOrderPendingFirmOrder> GetProductionOrderPendingFirmOrders(Nullable<int> locationID, Nullable<int> productionOrderID, Nullable<int> plannedOrderID, Nullable<int> customerID, string firmOrderIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var productionOrderIDParameter = productionOrderID.HasValue ?
                new ObjectParameter("ProductionOrderID", productionOrderID) :
                new ObjectParameter("ProductionOrderID", typeof(int));
    
            var plannedOrderIDParameter = plannedOrderID.HasValue ?
                new ObjectParameter("PlannedOrderID", plannedOrderID) :
                new ObjectParameter("PlannedOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var firmOrderIDsParameter = firmOrderIDs != null ?
                new ObjectParameter("FirmOrderIDs", firmOrderIDs) :
                new ObjectParameter("FirmOrderIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionOrderPendingFirmOrder>("GetProductionOrderPendingFirmOrders", locationIDParameter, productionOrderIDParameter, plannedOrderIDParameter, customerIDParameter, firmOrderIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<ProductionOrderViewDetail> GetProductionOrderViewDetails(Nullable<int> productionOrderID)
        {
            var productionOrderIDParameter = productionOrderID.HasValue ?
                new ObjectParameter("ProductionOrderID", productionOrderID) :
                new ObjectParameter("ProductionOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductionOrderViewDetail>("GetProductionOrderViewDetails", productionOrderIDParameter);
        }
    
        public virtual ObjectResult<WorkshiftBase> GetWorkshiftBases(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkshiftBase>("GetWorkshiftBases", searchTextParameter);
        }
    
        public virtual ObjectResult<SemifinishedProductIndex> GetSemifinishedProductIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedProductIndex>("GetSemifinishedProductIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SemifinishedProductViewDetail> GetSemifinishedProductViewDetails(Nullable<int> semifinishedProductID, Nullable<int> firmOrderID)
        {
            var semifinishedProductIDParameter = semifinishedProductID.HasValue ?
                new ObjectParameter("SemifinishedProductID", semifinishedProductID) :
                new ObjectParameter("SemifinishedProductID", typeof(int));
    
            var firmOrderIDParameter = firmOrderID.HasValue ?
                new ObjectParameter("FirmOrderID", firmOrderID) :
                new ObjectParameter("FirmOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedProductViewDetail>("GetSemifinishedProductViewDetails", semifinishedProductIDParameter, firmOrderIDParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedProductApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedProductApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedProductEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedProductEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedProductPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedProductPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SemifinishedProductSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SemifinishedProductSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int SemifinishedProductToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SemifinishedProductToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<MaterialIssuePendingFirmOrder> GetMaterialIssuePendingFirmOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaterialIssuePendingFirmOrder>("GetMaterialIssuePendingFirmOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<SemifinishedProductPendingMaterialIssueDetail> GetSemifinishedProductPendingMaterialIssueDetails(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedProductPendingMaterialIssueDetail>("GetSemifinishedProductPendingMaterialIssueDetails", locationIDParameter);
        }
    
        public virtual int AddCommodityBom(Nullable<int> commodityID, Nullable<int> bomID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var bomIDParameter = bomID.HasValue ?
                new ObjectParameter("BomID", bomID) :
                new ObjectParameter("BomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCommodityBom", commodityIDParameter, bomIDParameter);
        }
    
        public virtual ObjectResult<CommodityBom> GetCommodityBoms(Nullable<int> commodityID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityBom>("GetCommodityBoms", commodityIDParameter);
        }
    
        public virtual int RemoveCommodityBom(Nullable<int> commodityBomID)
        {
            var commodityBomIDParameter = commodityBomID.HasValue ?
                new ObjectParameter("CommodityBomID", commodityBomID) :
                new ObjectParameter("CommodityBomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveCommodityBom", commodityBomIDParameter);
        }
    
        public virtual ObjectResult<MaterialIssuePendingFirmOrderMaterial> GetMaterialIssuePendingFirmOrderMaterials(Nullable<int> locationID, Nullable<int> materialIssueID, Nullable<int> firmOrderID, Nullable<int> warehouseID, string goodsReceiptDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var materialIssueIDParameter = materialIssueID.HasValue ?
                new ObjectParameter("MaterialIssueID", materialIssueID) :
                new ObjectParameter("MaterialIssueID", typeof(int));
    
            var firmOrderIDParameter = firmOrderID.HasValue ?
                new ObjectParameter("FirmOrderID", firmOrderID) :
                new ObjectParameter("FirmOrderID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var goodsReceiptDetailIDsParameter = goodsReceiptDetailIDs != null ?
                new ObjectParameter("GoodsReceiptDetailIDs", goodsReceiptDetailIDs) :
                new ObjectParameter("GoodsReceiptDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaterialIssuePendingFirmOrderMaterial>("GetMaterialIssuePendingFirmOrderMaterials", locationIDParameter, materialIssueIDParameter, firmOrderIDParameter, warehouseIDParameter, goodsReceiptDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<CommodityMold> GetCommodityMolds(Nullable<int> commodityID)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommodityMold>("GetCommodityMolds", commodityIDParameter);
        }
    
        public virtual ObjectResult<MoldIndex> GetMoldIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MoldIndex>("GetMoldIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> MoldEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MoldEditable", entityIDParameter);
        }
    
        public virtual int RemoveCommodityMold(Nullable<int> commodityMoldID)
        {
            var commodityMoldIDParameter = commodityMoldID.HasValue ?
                new ObjectParameter("CommodityMoldID", commodityMoldID) :
                new ObjectParameter("CommodityMoldID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveCommodityMold", commodityMoldIDParameter);
        }
    
        public virtual int AddCommodityMold(Nullable<int> commodityID, Nullable<int> moldID, Nullable<decimal> quantity)
        {
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var moldIDParameter = moldID.HasValue ?
                new ObjectParameter("MoldID", moldID) :
                new ObjectParameter("MoldID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCommodityMold", commodityIDParameter, moldIDParameter, quantityParameter);
        }
    
        public virtual int UpdateCommodityMold(Nullable<int> commodityMoldID, Nullable<int> commodityID, Nullable<decimal> quantity, string remarks, Nullable<bool> isDefault)
        {
            var commodityMoldIDParameter = commodityMoldID.HasValue ?
                new ObjectParameter("CommodityMoldID", commodityMoldID) :
                new ObjectParameter("CommodityMoldID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCommodityMold", commodityMoldIDParameter, commodityIDParameter, quantityParameter, remarksParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<SemifinishedHandoverIndex> GetSemifinishedHandoverIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedHandoverIndex>("GetSemifinishedHandoverIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SemifinishedHandoverViewDetail> GetSemifinishedHandoverViewDetails(Nullable<int> semifinishedHandoverID)
        {
            var semifinishedHandoverIDParameter = semifinishedHandoverID.HasValue ?
                new ObjectParameter("SemifinishedHandoverID", semifinishedHandoverID) :
                new ObjectParameter("SemifinishedHandoverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedHandoverViewDetail>("GetSemifinishedHandoverViewDetails", semifinishedHandoverIDParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedHandoverPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedHandoverPostSaveValidate", entityIDParameter);
        }
    
        public virtual int SemifinishedHandoverSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SemifinishedHandoverSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<SemifinishedHandoverPendingCustomer> GetSemifinishedHandoverPendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedHandoverPendingCustomer>("GetSemifinishedHandoverPendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<SemifinishedHandoverPendingDetail> GetSemifinishedHandoverPendingDetails(Nullable<int> semifinishedHandoverID, Nullable<int> workshiftID, Nullable<int> customerID, string semifinishedProductIDs, Nullable<bool> isReadonly)
        {
            var semifinishedHandoverIDParameter = semifinishedHandoverID.HasValue ?
                new ObjectParameter("SemifinishedHandoverID", semifinishedHandoverID) :
                new ObjectParameter("SemifinishedHandoverID", typeof(int));
    
            var workshiftIDParameter = workshiftID.HasValue ?
                new ObjectParameter("WorkshiftID", workshiftID) :
                new ObjectParameter("WorkshiftID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var semifinishedProductIDsParameter = semifinishedProductIDs != null ?
                new ObjectParameter("SemifinishedProductIDs", semifinishedProductIDs) :
                new ObjectParameter("SemifinishedProductIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedHandoverPendingDetail>("GetSemifinishedHandoverPendingDetails", semifinishedHandoverIDParameter, workshiftIDParameter, customerIDParameter, semifinishedProductIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<SemifinishedHandoverPendingWorkshift> GetSemifinishedHandoverPendingWorkshifts(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SemifinishedHandoverPendingWorkshift>("GetSemifinishedHandoverPendingWorkshifts", locationIDParameter);
        }
    
        public virtual int UpdateCommodityBom(Nullable<int> commodityBomID, Nullable<int> commodityID, Nullable<decimal> blockUnit, Nullable<decimal> blockQuantity, string remarks, Nullable<bool> isDefault)
        {
            var commodityBomIDParameter = commodityBomID.HasValue ?
                new ObjectParameter("CommodityBomID", commodityBomID) :
                new ObjectParameter("CommodityBomID", typeof(int));
    
            var commodityIDParameter = commodityID.HasValue ?
                new ObjectParameter("CommodityID", commodityID) :
                new ObjectParameter("CommodityID", typeof(int));
    
            var blockUnitParameter = blockUnit.HasValue ?
                new ObjectParameter("BlockUnit", blockUnit) :
                new ObjectParameter("BlockUnit", typeof(decimal));
    
            var blockQuantityParameter = blockQuantity.HasValue ?
                new ObjectParameter("BlockQuantity", blockQuantity) :
                new ObjectParameter("BlockQuantity", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCommodityBom", commodityBomIDParameter, commodityIDParameter, blockUnitParameter, blockQuantityParameter, remarksParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<string> FinishedProductApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedProductApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FinishedProductEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedProductEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FinishedProductPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedProductPostSaveValidate", entityIDParameter);
        }
    
        public virtual int FinishedProductSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinishedProductSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int FinishedProductToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinishedProductToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<FinishedProductIndex> GetFinishedProductIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedProductIndex>("GetFinishedProductIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<FinishedProductPendingFirmOrder> GetFinishedProductPendingFirmOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedProductPendingFirmOrder>("GetFinishedProductPendingFirmOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<FinishedProductViewDetail> GetFinishedProductViewDetails(Nullable<int> finishedProductID, Nullable<int> locationID, Nullable<int> firmOrderID, Nullable<bool> isReadonly)
        {
            var finishedProductIDParameter = finishedProductID.HasValue ?
                new ObjectParameter("FinishedProductID", finishedProductID) :
                new ObjectParameter("FinishedProductID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var firmOrderIDParameter = firmOrderID.HasValue ?
                new ObjectParameter("FirmOrderID", firmOrderID) :
                new ObjectParameter("FirmOrderID", typeof(int));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedProductViewDetail>("GetFinishedProductViewDetails", finishedProductIDParameter, locationIDParameter, firmOrderIDParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedHandoverApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedHandoverApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> SemifinishedHandoverEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SemifinishedHandoverEditable", entityIDParameter);
        }
    
        public virtual int SemifinishedHandoverToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SemifinishedHandoverToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingMaterialIssueDetail> GetGoodsReceiptPendingMaterialIssueDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, string materialIssueDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var materialIssueDetailIDsParameter = materialIssueDetailIDs != null ?
                new ObjectParameter("MaterialIssueDetailIDs", materialIssueDetailIDs) :
                new ObjectParameter("MaterialIssueDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingMaterialIssueDetail>("GetGoodsReceiptPendingMaterialIssueDetails", locationIDParameter, goodsReceiptIDParameter, materialIssueDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<PlannedOrderLog> GetPlannedOrderLogs(Nullable<int> plannedOrderID, Nullable<int> firmOrderID)
        {
            var plannedOrderIDParameter = plannedOrderID.HasValue ?
                new ObjectParameter("PlannedOrderID", plannedOrderID) :
                new ObjectParameter("PlannedOrderID", typeof(int));
    
            var firmOrderIDParameter = firmOrderID.HasValue ?
                new ObjectParameter("FirmOrderID", firmOrderID) :
                new ObjectParameter("FirmOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlannedOrderLog>("GetPlannedOrderLogs", plannedOrderIDParameter, firmOrderIDParameter);
        }
    
        public virtual ObjectResult<FinishedHandoverIndex> GetFinishedHandoverIndexes(string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedHandoverIndex>("GetFinishedHandoverIndexes", aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<FinishedHandoverPendingCustomer> GetFinishedHandoverPendingCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedHandoverPendingCustomer>("GetFinishedHandoverPendingCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<FinishedHandoverPendingDetail> GetFinishedHandoverPendingDetails(Nullable<int> finishedHandoverID, Nullable<int> plannedOrderID, Nullable<int> customerID, string finishedProductPackageIDs, Nullable<bool> isReadonly)
        {
            var finishedHandoverIDParameter = finishedHandoverID.HasValue ?
                new ObjectParameter("FinishedHandoverID", finishedHandoverID) :
                new ObjectParameter("FinishedHandoverID", typeof(int));
    
            var plannedOrderIDParameter = plannedOrderID.HasValue ?
                new ObjectParameter("PlannedOrderID", plannedOrderID) :
                new ObjectParameter("PlannedOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finishedProductPackageIDsParameter = finishedProductPackageIDs != null ?
                new ObjectParameter("FinishedProductPackageIDs", finishedProductPackageIDs) :
                new ObjectParameter("FinishedProductPackageIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedHandoverPendingDetail>("GetFinishedHandoverPendingDetails", finishedHandoverIDParameter, plannedOrderIDParameter, customerIDParameter, finishedProductPackageIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<FinishedHandoverPendingPlannedOrder> GetFinishedHandoverPendingPlannedOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedHandoverPendingPlannedOrder>("GetFinishedHandoverPendingPlannedOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<FinishedHandoverViewDetail> GetFinishedHandoverViewDetails(Nullable<int> finishedHandoverID)
        {
            var finishedHandoverIDParameter = finishedHandoverID.HasValue ?
                new ObjectParameter("FinishedHandoverID", finishedHandoverID) :
                new ObjectParameter("FinishedHandoverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FinishedHandoverViewDetail>("GetFinishedHandoverViewDetails", finishedHandoverIDParameter);
        }
    
        public virtual ObjectResult<string> FinishedHandoverApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedHandoverApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FinishedHandoverEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedHandoverEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> FinishedHandoverPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinishedHandoverPostSaveValidate", entityIDParameter);
        }
    
        public virtual int FinishedHandoverSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinishedHandoverSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int FinishedHandoverToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinishedHandoverToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingPlannedOrderCustomer> GetGoodsReceiptPendingPlannedOrderCustomers(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingPlannedOrderCustomer>("GetGoodsReceiptPendingPlannedOrderCustomers", locationIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingPlannedOrderDetail> GetGoodsReceiptPendingPlannedOrderDetails(Nullable<int> locationID, Nullable<int> goodsReceiptID, Nullable<int> plannedOrderID, Nullable<int> customerID, string finishedProductPackageIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var plannedOrderIDParameter = plannedOrderID.HasValue ?
                new ObjectParameter("PlannedOrderID", plannedOrderID) :
                new ObjectParameter("PlannedOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finishedProductPackageIDsParameter = finishedProductPackageIDs != null ?
                new ObjectParameter("FinishedProductPackageIDs", finishedProductPackageIDs) :
                new ObjectParameter("FinishedProductPackageIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingPlannedOrderDetail>("GetGoodsReceiptPendingPlannedOrderDetails", locationIDParameter, goodsReceiptIDParameter, plannedOrderIDParameter, customerIDParameter, finishedProductPackageIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingPlannedOrder> GetGoodsReceiptPendingPlannedOrders(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingPlannedOrder>("GetGoodsReceiptPendingPlannedOrders", locationIDParameter);
        }
    
        public virtual ObjectResult<TransferOrderIndex> GetTransferOrderIndexes(Nullable<int> nMVNTaskID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderIndex>("GetTransferOrderIndexes", nMVNTaskIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<TransferOrderViewDetail> GetTransferOrderViewDetails(Nullable<int> transferOrderID)
        {
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferOrderViewDetail>("GetTransferOrderViewDetails", transferOrderIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderEditable", entityIDParameter);
        }
    
        public virtual int TransferOrderToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual int TransferOrderToggleVoid(Nullable<int> entityID, Nullable<bool> inActive, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var inActiveParameter = inActive.HasValue ?
                new ObjectParameter("InActive", inActive) :
                new ObjectParameter("InActive", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderToggleVoid", entityIDParameter, inActiveParameter, voidTypeIDParameter);
        }
    
        public virtual int TransferOrderToggleVoidDetail(Nullable<int> entityID, Nullable<int> entityDetailID, Nullable<bool> inActivePartial, Nullable<int> voidTypeID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityDetailIDParameter = entityDetailID.HasValue ?
                new ObjectParameter("EntityDetailID", entityDetailID) :
                new ObjectParameter("EntityDetailID", typeof(int));
    
            var inActivePartialParameter = inActivePartial.HasValue ?
                new ObjectParameter("InActivePartial", inActivePartial) :
                new ObjectParameter("InActivePartial", typeof(bool));
    
            var voidTypeIDParameter = voidTypeID.HasValue ?
                new ObjectParameter("VoidTypeID", voidTypeID) :
                new ObjectParameter("VoidTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferOrderToggleVoidDetail", entityIDParameter, entityDetailIDParameter, inActivePartialParameter, voidTypeIDParameter);
        }
    
        public virtual ObjectResult<string> TransferOrderVoidable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferOrderVoidable", entityIDParameter);
        }
    
        public virtual ObjectResult<WarehouseTransferIndex> GetWarehouseTransferIndexes(Nullable<int> nMVNTaskID, string aspUserID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var aspUserIDParameter = aspUserID != null ?
                new ObjectParameter("AspUserID", aspUserID) :
                new ObjectParameter("AspUserID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTransferIndex>("GetWarehouseTransferIndexes", nMVNTaskIDParameter, aspUserIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<WarehouseTransferPendingTransferOrderDetail> GetWarehouseTransferPendingTransferOrderDetails(Nullable<int> locationID, Nullable<int> nMVNTaskID, Nullable<int> warehouseTransferID, Nullable<int> transferOrderID, Nullable<int> warehouseID, Nullable<int> warehouseReceiptID, string goodsReceiptDetailIDs, Nullable<bool> isReadonly)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var warehouseTransferIDParameter = warehouseTransferID.HasValue ?
                new ObjectParameter("WarehouseTransferID", warehouseTransferID) :
                new ObjectParameter("WarehouseTransferID", typeof(int));
    
            var transferOrderIDParameter = transferOrderID.HasValue ?
                new ObjectParameter("TransferOrderID", transferOrderID) :
                new ObjectParameter("TransferOrderID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var warehouseReceiptIDParameter = warehouseReceiptID.HasValue ?
                new ObjectParameter("WarehouseReceiptID", warehouseReceiptID) :
                new ObjectParameter("WarehouseReceiptID", typeof(int));
    
            var goodsReceiptDetailIDsParameter = goodsReceiptDetailIDs != null ?
                new ObjectParameter("GoodsReceiptDetailIDs", goodsReceiptDetailIDs) :
                new ObjectParameter("GoodsReceiptDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTransferPendingTransferOrderDetail>("GetWarehouseTransferPendingTransferOrderDetails", locationIDParameter, nMVNTaskIDParameter, warehouseTransferIDParameter, transferOrderIDParameter, warehouseIDParameter, warehouseReceiptIDParameter, goodsReceiptDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<WarehouseTransferPendingTransferOrder> GetWarehouseTransferPendingTransferOrders(Nullable<int> locationID, Nullable<int> nMVNTaskID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTransferPendingTransferOrder>("GetWarehouseTransferPendingTransferOrders", locationIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<WarehouseTransferViewDetail> GetWarehouseTransferViewDetails(Nullable<int> warehouseTransferID)
        {
            var warehouseTransferIDParameter = warehouseTransferID.HasValue ?
                new ObjectParameter("WarehouseTransferID", warehouseTransferID) :
                new ObjectParameter("WarehouseTransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTransferViewDetail>("GetWarehouseTransferViewDetails", warehouseTransferIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseTransferApproved(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseTransferApproved", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseTransferEditable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseTransferEditable", entityIDParameter);
        }
    
        public virtual ObjectResult<string> WarehouseTransferPostSaveValidate(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WarehouseTransferPostSaveValidate", entityIDParameter);
        }
    
        public virtual int WarehouseTransferSaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseTransferSaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual int WarehouseTransferToggleApproved(Nullable<int> entityID, Nullable<bool> approved)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var approvedParameter = approved.HasValue ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WarehouseTransferToggleApproved", entityIDParameter, approvedParameter);
        }
    
        public virtual ObjectResult<WarehouseTransferPendingWarehouse> GetWarehouseTransferPendingWarehouses(Nullable<int> locationID, Nullable<int> nMVNTaskID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WarehouseTransferPendingWarehouse>("GetWarehouseTransferPendingWarehouses", locationIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingWarehouse> GetGoodsReceiptPendingWarehouses(Nullable<int> locationID, Nullable<int> nMVNTaskID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingWarehouse>("GetGoodsReceiptPendingWarehouses", locationIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingWarehouseTransferDetail> GetGoodsReceiptPendingWarehouseTransferDetails(Nullable<int> nMVNTaskID, Nullable<int> goodsReceiptID, Nullable<int> warehouseTransferID, Nullable<int> warehouseID, Nullable<int> warehouseIssueID, string warehouseTransferDetailIDs, Nullable<bool> isReadonly)
        {
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            var warehouseTransferIDParameter = warehouseTransferID.HasValue ?
                new ObjectParameter("WarehouseTransferID", warehouseTransferID) :
                new ObjectParameter("WarehouseTransferID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var warehouseIssueIDParameter = warehouseIssueID.HasValue ?
                new ObjectParameter("WarehouseIssueID", warehouseIssueID) :
                new ObjectParameter("WarehouseIssueID", typeof(int));
    
            var warehouseTransferDetailIDsParameter = warehouseTransferDetailIDs != null ?
                new ObjectParameter("WarehouseTransferDetailIDs", warehouseTransferDetailIDs) :
                new ObjectParameter("WarehouseTransferDetailIDs", typeof(string));
    
            var isReadonlyParameter = isReadonly.HasValue ?
                new ObjectParameter("IsReadonly", isReadonly) :
                new ObjectParameter("IsReadonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingWarehouseTransferDetail>("GetGoodsReceiptPendingWarehouseTransferDetails", nMVNTaskIDParameter, goodsReceiptIDParameter, warehouseTransferIDParameter, warehouseIDParameter, warehouseIssueIDParameter, warehouseTransferDetailIDsParameter, isReadonlyParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptPendingWarehouseTransfer> GetGoodsReceiptPendingWarehouseTransfers(Nullable<int> locationID, Nullable<int> nMVNTaskID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nMVNTaskIDParameter = nMVNTaskID.HasValue ?
                new ObjectParameter("NMVNTaskID", nMVNTaskID) :
                new ObjectParameter("NMVNTaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptPendingWarehouseTransfer>("GetGoodsReceiptPendingWarehouseTransfers", locationIDParameter, nMVNTaskIDParameter);
        }
    
        public virtual ObjectResult<GoodsReceiptViewDetail> GetGoodsReceiptViewDetails(Nullable<int> goodsReceiptID)
        {
            var goodsReceiptIDParameter = goodsReceiptID.HasValue ?
                new ObjectParameter("GoodsReceiptID", goodsReceiptID) :
                new ObjectParameter("GoodsReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoodsReceiptViewDetail>("GetGoodsReceiptViewDetails", goodsReceiptIDParameter);
        }
    
        public virtual ObjectResult<string> CommodityDeletable(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CommodityDeletable", entityIDParameter);
        }
    
        public virtual int CommoditySaveRelative(Nullable<int> entityID, Nullable<int> saveRelativeOption)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var saveRelativeOptionParameter = saveRelativeOption.HasValue ?
                new ObjectParameter("SaveRelativeOption", saveRelativeOption) :
                new ObjectParameter("SaveRelativeOption", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommoditySaveRelative", entityIDParameter, saveRelativeOptionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetSemifinishedProductPendingMaterialQuantityRemains(Nullable<int> materialIssueDetailID)
        {
            var materialIssueDetailIDParameter = materialIssueDetailID.HasValue ?
                new ObjectParameter("MaterialIssueDetailID", materialIssueDetailID) :
                new ObjectParameter("MaterialIssueDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetSemifinishedProductPendingMaterialQuantityRemains", materialIssueDetailIDParameter);
        }
    }
}
